###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V5.50.0.51878/W32 for ARM     14/Mar/2021  19:14:51 #
# Copyright (C) 1999-2010 IAR Systems AB.                                     #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\Projects\in-18-nixie-clock\at91lib\usb\device\cdc-ser #
#                    ial\CDCDSerialDriver.c                                   #
#    Command line =  C:\Projects\in-18-nixie-clock\at91lib\usb\device\cdc-ser #
#                    ial\CDCDSerialDriver.c -D at91sam7s128 -D flash -D       #
#                    TRACE_LEVEL=3 -lC C:\Projects\in-18-nixie-clock\at91sam7 #
#                    s-ek\usb-device-cdc-serial-project\ewp\at91sam7s128_flas #
#                    h\List\ --remarks --diag_suppress Pe826,Pe1375 -o        #
#                    C:\Projects\in-18-nixie-clock\at91sam7s-ek\usb-device-cd #
#                    c-serial-project\ewp\at91sam7s128_flash\Obj\ --debug     #
#                    --endian=little --cpu=ARM7TDMI -e --fpu=None             #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 5.4\arm\INC\DLib_Config_Full. #
#                    h" -I C:\Projects\in-18-nixie-clock\at91sam7s-ek\usb-dev #
#                    ice-cdc-serial-project\ewp\..\..\..\at91lib/peripherals\ #
#                     -I C:\Projects\in-18-nixie-clock\at91sam7s-ek\usb-devic #
#                    e-cdc-serial-project\ewp\..\..\..\at91lib/components\    #
#                    -I C:\Projects\in-18-nixie-clock\at91sam7s-ek\usb-device #
#                    -cdc-serial-project\ewp\..\..\..\at91lib/usb/device\ -I  #
#                    C:\Projects\in-18-nixie-clock\at91sam7s-ek\usb-device-cd #
#                    c-serial-project\ewp\..\..\..\at91lib\ -I                #
#                    C:\Projects\in-18-nixie-clock\at91sam7s-ek\usb-device-cd #
#                    c-serial-project\ewp\..\..\..\external_libs\ -I          #
#                    C:\Projects\in-18-nixie-clock\at91sam7s-ek\usb-device-cd #
#                    c-serial-project\ewp\..\..\..\at91lib/boards/at91sam7s-e #
#                    k\ -I "C:\Program Files (x86)\IAR Systems\Embedded       #
#                    Workbench 5.4\arm\INC\" --interwork --cpu_mode arm -Ohz  #
#    List file    =  C:\Projects\in-18-nixie-clock\at91sam7s-ek\usb-device-cd #
#                    c-serial-project\ewp\at91sam7s128_flash\List\CDCDSerialD #
#                    river.lst                                                #
#    Object file  =  C:\Projects\in-18-nixie-clock\at91sam7s-ek\usb-device-cd #
#                    c-serial-project\ewp\at91sam7s128_flash\Obj\CDCDSerialDr #
#                    iver.o                                                   #
#                                                                             #
#                                                                             #
###############################################################################

C:\Projects\in-18-nixie-clock\at91lib\usb\device\cdc-serial\CDCDSerialDriver.c
      1          /* ----------------------------------------------------------------------------
      2           *         ATMEL Microcontroller Software Support 
      3           * ----------------------------------------------------------------------------
      4           * Copyright (c) 2008, Atmel Corporation
      5           *
      6           * All rights reserved.
      7           *
      8           * Redistribution and use in source and binary forms, with or without
      9           * modification, are permitted provided that the following conditions are met:
     10           *
     11           * - Redistributions of source code must retain the above copyright notice,
     12           * this list of conditions and the disclaimer below.
     13           *
     14           * Atmel's name may not be used to endorse or promote products derived from
     15           * this software without specific prior written permission.
     16           *
     17           * DISCLAIMER: THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR
     18           * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
     19           * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
     20           * DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR ANY DIRECT, INDIRECT,
     21           * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
     22           * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
     23           * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     24           * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     25           * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
     26           * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     27           * ----------------------------------------------------------------------------
     28           */
     29          
     30          /*
     31              Title: CDCDSerialDriver implementation
     32          
     33              About: Purpose
     34                  Implementation of the CDCDSerialDriver class methods.
     35          */
     36          
     37          //------------------------------------------------------------------------------
     38          //         Headers
     39          //------------------------------------------------------------------------------
     40          
     41          #include "CDCDSerialDriver.h"
     42          #include "CDCDSerialDriverDescriptors.h"
     43          #include <utility/trace.h>
     44          #include <utility/assert.h>
     45          #include <usb/device/core/USBDDriver.h>
     46          #include <usb/common/cdc/CDCLineCoding.h>
     47          #include <usb/common/cdc/CDCGenericRequest.h>
     48          #include <usb/common/cdc/CDCSetControlLineStateRequest.h>
     49          
     50          //------------------------------------------------------------------------------
     51          //         Types
     52          //------------------------------------------------------------------------------
     53          
     54          //------------------------------------------------------------------------------
     55          /// USB driver for a CDC class implementing a virtual COM serial connection.
     56          //------------------------------------------------------------------------------
     57          typedef struct {
     58          
     59              /// Standard USBDDriver instance.
     60              USBDDriver usbdDriver;
     61              /// Current line coding (baudrate, parity, stop bits).
     62              CDCLineCoding lineCoding;
     63              /// Indicates if the RS232 carrier is active.
     64              unsigned char isCarrierActivated;
     65              /// Current serial port states
     66              unsigned short serialState;
     67          
     68          } CDCDSerialDriver;
     69          
     70          //------------------------------------------------------------------------------
     71          //         Internal variables
     72          //------------------------------------------------------------------------------
     73          
     74          /// Static instance of the CDC serial driver.

   \                                 In section .bss, align 4
     75          static CDCDSerialDriver cdcdSerialDriver;
   \                     cdcdSerialDriver:
   \   00000000                      DS8 24
     76          
     77          //------------------------------------------------------------------------------
     78          //         Internal functions
     79          //------------------------------------------------------------------------------
     80          
     81          //------------------------------------------------------------------------------
     82          /// Callback function which should be invoked after the data of a
     83          /// SetLineCoding request has been retrieved. Sends a zero-length packet
     84          /// to the host for acknowledging the request.
     85          //------------------------------------------------------------------------------

   \                                 In section .text, align 4, keep-with-next
     86          static void CDCDSerialDriver_SetLineCodingCallback()
     87          {
   \                     CDCDSerialDriver_SetLineCodingCallback:
   \   00000000   00502DE9           PUSH     {R12,LR}
     88              USBD_Write(0, 0, 0, 0, 0);
   \   00000004   0000A0E3           MOV      R0,#+0
   \   00000008   00008DE5           STR      R0,[SP, #+0]
   \   0000000C   0030A0E3           MOV      R3,#+0
   \   00000010   0020A0E3           MOV      R2,#+0
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   ........           BL       USBD_Write
     89          }
   \   0000001C   0140BDE8           POP      {R0,LR}
   \   00000020   1EFF2FE1           BX       LR               ;; return
     90          
     91          //------------------------------------------------------------------------------
     92          /// Receives new line coding information from the USB host.
     93          //------------------------------------------------------------------------------
     94          static void CDCDSerialDriver_SetLineCoding()
     95          {
     96              TRACE_INFO_WP("sLineCoding ");
     97          
     98              USBD_Read(0,
     99                        (void *) &(cdcdSerialDriver.lineCoding),
    100                        sizeof(CDCLineCoding),
    101                        (TransferCallback) CDCDSerialDriver_SetLineCodingCallback,
    102                        0);
    103          }
    104          
    105          //------------------------------------------------------------------------------
    106          /// Sends the current line coding information to the host through Control
    107          /// endpoint 0.
    108          //------------------------------------------------------------------------------
    109          static void CDCDSerialDriver_GetLineCoding()
    110          {
    111              TRACE_INFO_WP("gLineCoding ");
    112          
    113              USBD_Write(0,
    114                         (void *) &(cdcdSerialDriver.lineCoding),
    115                         sizeof(CDCLineCoding),
    116                         0,
    117                         0);
    118          }
    119          
    120          //------------------------------------------------------------------------------
    121          /// Changes the state of the serial driver according to the information
    122          /// sent by the host via a SetControlLineState request, and acknowledges
    123          /// the request with a zero-length packet.
    124          //------------------------------------------------------------------------------
    125          static void CDCDSerialDriver_SetControlLineState(unsigned char activateCarrier,
    126                                                           unsigned char isDTEPresent)
    127          {
    128              TRACE_INFO_WP(
    129                        "sControlLineState(%d, %d) ",
    130                        activateCarrier,
    131                        isDTEPresent);
    132          
    133              cdcdSerialDriver.isCarrierActivated = activateCarrier;
    134              USBD_Write(0, 0, 0, 0, 0);
    135          }
    136          
    137          //------------------------------------------------------------------------------
    138          //         Optional RequestReceived() callback re-implementation
    139          //------------------------------------------------------------------------------
    140          #if !defined(NOAUTOCALLBACK)
    141          
    142          //------------------------------------------------------------------------------
    143          /// Re-implemented callback, invoked when a new USB Request is received.
    144          //------------------------------------------------------------------------------

   \                                 In section .text, align 4, keep-with-next
    145          void USBDCallbacks_RequestReceived(const USBGenericRequest *request)
    146          {
    147              CDCDSerialDriver_RequestHandler(request);
   \                     USBDCallbacks_RequestReceived:
   \   00000000   ........           B        CDCDSerialDriver_RequestHandler  ;; tailcall
    148          }
    149          
    150          #endif
    151          
    152          //------------------------------------------------------------------------------
    153          //         Exported functions
    154          //------------------------------------------------------------------------------
    155          
    156          //------------------------------------------------------------------------------
    157          /// Initializes the USB Device CDC serial driver & USBD Driver.
    158          //------------------------------------------------------------------------------

   \                                 In section .text, align 4, keep-with-next
    159          void CDCDSerialDriver_Initialize()
    160          {
   \                     CDCDSerialDriver_Initialize:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   08D04DE2           SUB      SP,SP,#+8
    161              TRACE_INFO("CDCDSerialDriver_Initialize\n\r");
    162              
    163              // Initialize Abstract Control Model attributes
    164              CDCLineCoding_Initialize(&(cdcdSerialDriver.lineCoding),
    165                                       9600,
    166                                       CDCLineCoding_ONESTOPBIT,
    167                                       CDCLineCoding_NOPARITY,
    168                                       8);
   \   00000008   ........           LDR      R4,??DataTable3
   \   0000000C   0800A0E3           MOV      R0,#+8
   \   00000010   00008DE5           STR      R0,[SP, #+0]
   \   00000014   0030A0E3           MOV      R3,#+0
   \   00000018   0020A0E3           MOV      R2,#+0
   \   0000001C   961DA0E3           MOV      R1,#+9600
   \   00000020   0C0084E2           ADD      R0,R4,#+12
   \   00000024   ........           BL       CDCLineCoding_Initialize
    169              cdcdSerialDriver.isCarrierActivated = 0;
   \   00000028   0000A0E3           MOV      R0,#+0
   \   0000002C   1300C4E5           STRB     R0,[R4, #+19]
    170              cdcdSerialDriver.serialState = 0;
   \   00000030   B401C4E1           STRH     R0,[R4, #+20]
    171          
    172              // Initialize the standard driver
    173              USBDDriver_Initialize(&(cdcdSerialDriver.usbdDriver),
    174                                    &cdcdSerialDriverDescriptors,
    175                                    0); // Multiple settings for interfaces not supported
   \   00000034   0020A0E3           MOV      R2,#+0
   \   00000038   ........           LDR      R1,??DataTable3_1
   \   0000003C   0400A0E1           MOV      R0,R4
   \   00000040   ........           BL       USBDDriver_Initialize
    176          
    177              // Initialize the USB driver
    178              USBD_Init();
   \   00000044   1340BDE8           POP      {R0,R1,R4,LR}
   \   00000048   ........           B        USBD_Init        ;; tailcall
    179          }
    180          
    181          //------------------------------------------------------------------------------
    182          /// Handles CDC-specific SETUP requests. Should be called from a
    183          /// re-implementation of USBDCallbacks_RequestReceived() method.
    184          /// \param Pointer to a USBGenericRequest instance.
    185          //------------------------------------------------------------------------------

   \                                 In section .text, align 4, keep-with-next
    186          void CDCDSerialDriver_RequestHandler(const USBGenericRequest *request)
    187          {
   \                     CDCDSerialDriver_RequestHandler:
   \   00000000   38402DE9           PUSH     {R3-R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    188              TRACE_INFO_WP("NewReq ");
    189          
    190              // Handle the request
    191              switch (USBGenericRequest_GetRequest(request)) {
   \   00000008   ........           LDR      R5,??DataTable3
   \   0000000C   ........           BL       USBGenericRequest_GetRequest
   \   00000010   200050E3           CMP      R0,#+32
   \   00000014   0400000A           BEQ      ??CDCDSerialDriver_RequestHandler_0
   \   00000018   1C00003A           BCC      ??CDCDSerialDriver_RequestHandler_1
   \   0000001C   220050E3           CMP      R0,#+34
   \   00000020   0F00000A           BEQ      ??CDCDSerialDriver_RequestHandler_2
   \   00000024   0700003A           BCC      ??CDCDSerialDriver_RequestHandler_3
   \   00000028   180000EA           B        ??CDCDSerialDriver_RequestHandler_1
    192          
    193                  case CDCGenericRequest_SETLINECODING:
    194                      
    195                      CDCDSerialDriver_SetLineCoding();
   \                     ??CDCDSerialDriver_RequestHandler_0:
   \   0000002C   0000A0E3           MOV      R0,#+0
   \   00000030   00008DE5           STR      R0,[SP, #+0]
   \   00000034   ........           LDR      R3,??DataTable3_2
   \   00000038   0720A0E3           MOV      R2,#+7
   \   0000003C   0C1085E2           ADD      R1,R5,#+12
   \   00000040   ........           BL       USBD_Read
   \   00000044   140000EA           B        ??CDCDSerialDriver_RequestHandler_4
    196                      break;
    197          
    198                  case CDCGenericRequest_GETLINECODING:
    199          
    200                      CDCDSerialDriver_GetLineCoding();
   \                     ??CDCDSerialDriver_RequestHandler_3:
   \   00000048   0000A0E3           MOV      R0,#+0
   \   0000004C   00008DE5           STR      R0,[SP, #+0]
   \   00000050   0030A0E3           MOV      R3,#+0
   \   00000054   0720A0E3           MOV      R2,#+7
   \   00000058   0C1085E2           ADD      R1,R5,#+12
   \                     ??CDCDSerialDriver_RequestHandler_5:
   \   0000005C   ........           BL       USBD_Write
   \   00000060   0D0000EA           B        ??CDCDSerialDriver_RequestHandler_4
    201                      break;
    202          
    203                  case CDCGenericRequest_SETCONTROLLINESTATE:
    204          
    205                      CDCDSerialDriver_SetControlLineState(
    206                          CDCSetControlLineStateRequest_ActivateCarrier(request),
    207                          CDCSetControlLineStateRequest_IsDtePresent(request));
   \                     ??CDCDSerialDriver_RequestHandler_2:
   \   00000064   0400A0E1           MOV      R0,R4
   \   00000068   ........           BL       CDCSetControlLineStateRequest_IsDtePresent
   \   0000006C   0400A0E1           MOV      R0,R4
   \   00000070   ........           BL       CDCSetControlLineStateRequest_ActivateCarrier
   \   00000074   1300C5E5           STRB     R0,[R5, #+19]
   \   00000078   0000A0E3           MOV      R0,#+0
   \   0000007C   00008DE5           STR      R0,[SP, #+0]
   \   00000080   0030A0E3           MOV      R3,#+0
   \   00000084   0020A0E3           MOV      R2,#+0
   \   00000088   0010A0E3           MOV      R1,#+0
   \   0000008C   F2FFFFEA           B        ??CDCDSerialDriver_RequestHandler_5
    208          
    209                      break;
    210          
    211                  default:
    212          
    213                      USBDDriver_RequestHandler(&(cdcdSerialDriver.usbdDriver), request);
   \                     ??CDCDSerialDriver_RequestHandler_1:
   \   00000090   0410A0E1           MOV      R1,R4
   \   00000094   0500A0E1           MOV      R0,R5
   \   00000098   ........           BL       USBDDriver_RequestHandler
    214                      break;
    215              }
    216          }
   \                     ??CDCDSerialDriver_RequestHandler_4:
   \   0000009C   3140BDE8           POP      {R0,R4,R5,LR}
   \   000000A0   1EFF2FE1           BX       LR               ;; return
    217          
    218          //------------------------------------------------------------------------------
    219          /// Receives data from the host through the virtual COM port created by
    220          /// the CDC device serial driver. This function behaves like USBD_Read.
    221          /// \param data Pointer to the data buffer to put received data.
    222          /// \param size Size of the data buffer in bytes.
    223          /// \param callback Optional callback function to invoke when the transfer
    224          ///                 finishes.
    225          /// \param argument Optional argument to the callback function.
    226          /// \return USBD_STATUS_SUCCESS if the read operation has been started normally;
    227          ///         otherwise, the corresponding error code.
    228          //------------------------------------------------------------------------------

   \                                 In section .text, align 4, keep-with-next
    229          unsigned char CDCDSerialDriver_Read(void *data,
    230                                              unsigned int size,
    231                                              TransferCallback callback,
    232                                              void *argument)
    233          {
   \                     CDCDSerialDriver_Read:
   \   00000000   00502DE9           PUSH     {R12,LR}
    234              return USBD_Read(CDCDSerialDriverDescriptors_DATAOUT,
    235                               data,
    236                               size,
    237                               callback,
    238                               argument);
   \   00000004   00308DE5           STR      R3,[SP, #+0]
   \   00000008   0230A0E1           MOV      R3,R2
   \   0000000C   0120A0E1           MOV      R2,R1
   \   00000010   0010A0E1           MOV      R1,R0
   \   00000014   0100A0E3           MOV      R0,#+1
   \   00000018   ........           BL       USBD_Read
   \   0000001C   ........           B        ?Subroutine0
    239          }

   \                                 In section .text, align 4, keep-with-next
   \                     ?Subroutine0:
   \   00000000   0240BDE8           POP      {R1,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
    240          
    241          //------------------------------------------------------------------------------
    242          /// Sends a data buffer through the virtual COM port created by the CDC
    243          /// device serial driver. This function behaves exactly like USBD_Write.
    244          /// \param data Pointer to the data buffer to send.
    245          /// \param size Size of the data buffer in bytes.
    246          /// \param callback Optional callback function to invoke when the transfer
    247          ///                 finishes.
    248          /// \param argument Optional argument to the callback function.
    249          /// \return USBD_STATUS_SUCCESS if the read operation has been started normally;
    250          ///         otherwise, the corresponding error code.
    251          //------------------------------------------------------------------------------

   \                                 In section .text, align 4, keep-with-next
    252          unsigned char CDCDSerialDriver_Write(void *data,
    253                                               unsigned int size,
    254                                               TransferCallback callback,
    255                                               void *argument)
    256          {
   \                     CDCDSerialDriver_Write:
   \   00000000   00502DE9           PUSH     {R12,LR}
    257              return USBD_Write(CDCDSerialDriverDescriptors_DATAIN,
    258                                data,
    259                                size,
    260                                callback,
    261                                argument);
   \   00000004   00308DE5           STR      R3,[SP, #+0]
   \   00000008   0230A0E1           MOV      R3,R2
   \   0000000C   0120A0E1           MOV      R2,R1
   \   00000010   0010A0E1           MOV      R1,R0
   \   00000014   0200A0E3           MOV      R0,#+2
   \   00000018   ........           BL       USBD_Write
   \   0000001C                      REQUIRE ?Subroutine0
   \   0000001C                      ;; // Fall through to label ?Subroutine0
    262          }
    263          
    264          //------------------------------------------------------------------------------
    265          /// Returns the current status of the RS-232 line.
    266          //------------------------------------------------------------------------------

   \                                 In section .text, align 4, keep-with-next
    267          unsigned short CDCDSerialDriver_GetSerialState()
    268          {
    269              return cdcdSerialDriver.serialState;
   \                     CDCDSerialDriver_GetSerialState:
   \   00000000   ........           LDR      R0,??DataTable3
   \   00000004   B401D0E1           LDRH     R0,[R0, #+20]
   \   00000008   1EFF2FE1           BX       LR               ;; return
    270          }
    271          
    272          //------------------------------------------------------------------------------
    273          /// Sets the current serial state of the device to the given value.
    274          /// \param serialState  New device state.
    275          //------------------------------------------------------------------------------

   \                                 In section .text, align 4, keep-with-next
    276          void CDCDSerialDriver_SetSerialState(unsigned short serialState)
    277          {
   \                     CDCDSerialDriver_SetSerialState:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   08D04DE2           SUB      SP,SP,#+8
    278              ASSERT((serialState & 0xFF80) == 0,
    279                     "CDCDSerialDriver_SetSerialState: Bits D7-D15 are reserved\n\r");
   \   00000008   8010A0E3           MOV      R1,#+128
   \   0000000C   FF1C81E3           ORR      R1,R1,#0xFF00
   \   00000010   000011E1           TST      R1,R0
   \   00000014   0500000A           BEQ      ??CDCDSerialDriver_SetSerialState_0
   \   00000018   ........           LDR      R4,??DataTable3_3
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           BL       printf
   \   00000024   100084E2           ADD      R0,R4,#+16
   \   00000028   ........           BL       printf
   \                     ??CDCDSerialDriver_SetSerialState_1:
   \   0000002C   FEFFFFEA           B        ??CDCDSerialDriver_SetSerialState_1
    280          
    281              // If new state is different from previous one, send a notification to the
    282              // host
    283              if (cdcdSerialDriver.serialState != serialState) {
   \                     ??CDCDSerialDriver_SetSerialState_0:
   \   00000030   ........           LDR      R4,??DataTable3
   \   00000034   B411D4E1           LDRH     R1,[R4, #+20]
   \   00000038   000051E1           CMP      R1,R0
   \   0000003C   0A00000A           BEQ      ??CDCDSerialDriver_SetSerialState_2
    284          
    285                  cdcdSerialDriver.serialState = serialState;
   \   00000040   B401C4E1           STRH     R0,[R4, #+20]
    286                  USBD_Write(CDCDSerialDriverDescriptors_NOTIFICATION,
    287                             &(cdcdSerialDriver.serialState),
    288                             2,
    289                             0,
    290                             0);
   \   00000044   0000A0E3           MOV      R0,#+0
   \   00000048   00008DE5           STR      R0,[SP, #+0]
   \   0000004C   0030A0E3           MOV      R3,#+0
   \   00000050   0220A0E3           MOV      R2,#+2
   \   00000054   141084E2           ADD      R1,R4,#+20
   \   00000058   0300A0E3           MOV      R0,#+3
   \   0000005C   ........           BL       USBD_Write
    291          
    292                  // Reset one-time flags
    293                  cdcdSerialDriver.serialState &= ~(CDCDSerialDriver_STATE_OVERRUN
    294                                                    | CDCDSerialDriver_STATE_PARITY
    295                                                    | CDCDSerialDriver_STATE_FRAMING
    296                                                    | CDCDSerialDriver_STATE_RINGSIGNAL
    297                                                    | CDCDSerialDriver_STATE_BREAK);
   \   00000060   B401D4E1           LDRH     R0,[R4, #+20]
   \   00000064   7C00C0E3           BIC      R0,R0,#0x7C
   \   00000068   B401C4E1           STRH     R0,[R4, #+20]
    298              }
    299          }
   \                     ??CDCDSerialDriver_SetSerialState_2:
   \   0000006C   1340BDE8           POP      {R0,R1,R4,LR}
   \   00000070   1EFF2FE1           BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   ........           DC32     cdcdSerialDriver

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   ........           DC32     cdcdSerialDriverDescriptors

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   ........           DC32     CDCDSerialDriver_SetLineCodingCallback

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   ........           DC32     `?<Constant "-F- ASSERT: ">`

   \                                 In section .rodata, align 4
   \                     `?<Constant "-F- ASSERT: ">`:
   \   00000000   2D462D204153       DC8 "-F- ASSERT: "
   \              534552543A20
   \              00          
   \   0000000D   000000             DC8 0, 0, 0
   \   00000010   434443445365       DC8 43H, 44H, 43H, 44H, 53H, 65H, 72H, 69H
   \              7269        
   \   00000018   616C44726976       DC8 61H, 6CH, 44H, 72H, 69H, 76H, 65H, 72H
   \              6572        
   \   00000020   5F5365745365       DC8 5FH, 53H, 65H, 74H, 53H, 65H, 72H, 69H
   \              7269        
   \   00000028   616C53746174       DC8 61H, 6CH, 53H, 74H, 61H, 74H, 65H, 3AH
   \              653A        
   \   00000030   204269747320       DC8 20H, 42H, 69H, 74H, 73H, 20H, 44H, 37H
   \              4437        
   \   00000038   2D4431352061       DC8 2DH, 44H, 31H, 35H, 20H, 61H, 72H, 65H
   \              7265        
   \   00000040   207265736572       DC8 20H, 72H, 65H, 73H, 65H, 72H, 76H, 65H
   \              7665        
   \   00000048   640A0D00           DC8 64H, 0AH, 0DH, 0
    300          

   Maximum stack usage in bytes:

     Function                       .cstack
     --------                       -------
     CDCDSerialDriver_GetSerialState
                                         0
     CDCDSerialDriver_Initialize        16
     CDCDSerialDriver_Read               8
     CDCDSerialDriver_RequestHandler
                                        16
     CDCDSerialDriver_SetLineCodingCallback
                                         8
     CDCDSerialDriver_SetSerialState
                                        16
     CDCDSerialDriver_Write              8
     USBDCallbacks_RequestReceived       8


   Section sizes:

     Function/Label                 Bytes
     --------------                 -----
     cdcdSerialDriver                 24
     CDCDSerialDriver_SetLineCodingCallback
                                      36
     USBDCallbacks_RequestReceived     4
     CDCDSerialDriver_Initialize      76
     CDCDSerialDriver_RequestHandler
                                     164
     CDCDSerialDriver_Read            32
     ?Subroutine0                      8
     CDCDSerialDriver_Write           28
     CDCDSerialDriver_GetSerialState
                                      12
     CDCDSerialDriver_SetSerialState
                                     116
     ??DataTable3                      4
     ??DataTable3_1                    4
     ??DataTable3_2                    4
     ??DataTable3_3                    4
     ?<Constant "-F- ASSERT: ">       76

 
  24 bytes in section .bss
  76 bytes in section .rodata
 492 bytes in section .text
 
 492 bytes of CODE  memory
  76 bytes of CONST memory
  24 bytes of DATA  memory

Errors: none
Warnings: none
