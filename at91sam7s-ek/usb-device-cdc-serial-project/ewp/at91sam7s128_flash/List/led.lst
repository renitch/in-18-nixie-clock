###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V5.50.0.51878/W32 for ARM     14/Mar/2021  19:14:53 #
# Copyright (C) 1999-2010 IAR Systems AB.                                     #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\Projects\in-18-nixie-clock\at91lib\utility\led.c      #
#    Command line =  C:\Projects\in-18-nixie-clock\at91lib\utility\led.c -D   #
#                    at91sam7s128 -D flash -D TRACE_LEVEL=3 -lC               #
#                    C:\Projects\in-18-nixie-clock\at91sam7s-ek\usb-device-cd #
#                    c-serial-project\ewp\at91sam7s128_flash\List\ --remarks  #
#                    --diag_suppress Pe826,Pe1375 -o                          #
#                    C:\Projects\in-18-nixie-clock\at91sam7s-ek\usb-device-cd #
#                    c-serial-project\ewp\at91sam7s128_flash\Obj\ --debug     #
#                    --endian=little --cpu=ARM7TDMI -e --fpu=None             #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 5.4\arm\INC\DLib_Config_Full. #
#                    h" -I C:\Projects\in-18-nixie-clock\at91sam7s-ek\usb-dev #
#                    ice-cdc-serial-project\ewp\..\..\..\at91lib/peripherals\ #
#                     -I C:\Projects\in-18-nixie-clock\at91sam7s-ek\usb-devic #
#                    e-cdc-serial-project\ewp\..\..\..\at91lib/components\    #
#                    -I C:\Projects\in-18-nixie-clock\at91sam7s-ek\usb-device #
#                    -cdc-serial-project\ewp\..\..\..\at91lib/usb/device\ -I  #
#                    C:\Projects\in-18-nixie-clock\at91sam7s-ek\usb-device-cd #
#                    c-serial-project\ewp\..\..\..\at91lib\ -I                #
#                    C:\Projects\in-18-nixie-clock\at91sam7s-ek\usb-device-cd #
#                    c-serial-project\ewp\..\..\..\external_libs\ -I          #
#                    C:\Projects\in-18-nixie-clock\at91sam7s-ek\usb-device-cd #
#                    c-serial-project\ewp\..\..\..\at91lib/boards/at91sam7s-e #
#                    k\ -I "C:\Program Files (x86)\IAR Systems\Embedded       #
#                    Workbench 5.4\arm\INC\" --interwork --cpu_mode arm -Ohz  #
#    List file    =  C:\Projects\in-18-nixie-clock\at91sam7s-ek\usb-device-cd #
#                    c-serial-project\ewp\at91sam7s128_flash\List\led.lst     #
#    Object file  =  C:\Projects\in-18-nixie-clock\at91sam7s-ek\usb-device-cd #
#                    c-serial-project\ewp\at91sam7s128_flash\Obj\led.o        #
#                                                                             #
#                                                                             #
###############################################################################

C:\Projects\in-18-nixie-clock\at91lib\utility\led.c
      1          /* ----------------------------------------------------------------------------
      2           *         ATMEL Microcontroller Software Support 
      3           * ----------------------------------------------------------------------------
      4           * Copyright (c) 2008, Atmel Corporation
      5           *
      6           * All rights reserved.
      7           *
      8           * Redistribution and use in source and binary forms, with or without
      9           * modification, are permitted provided that the following conditions are met:
     10           *
     11           * - Redistributions of source code must retain the above copyright notice,
     12           * this list of conditions and the disclaimer below.
     13           *
     14           * Atmel's name may not be used to endorse or promote products derived from
     15           * this software without specific prior written permission.
     16           *
     17           * DISCLAIMER: THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR
     18           * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
     19           * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
     20           * DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR ANY DIRECT, INDIRECT,
     21           * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
     22           * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
     23           * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     24           * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     25           * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
     26           * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     27           * ----------------------------------------------------------------------------
     28           */
     29          
     30          //------------------------------------------------------------------------------
     31          //         Headers
     32          //------------------------------------------------------------------------------
     33          
     34          #include "led.h"
     35          #include <board.h>
     36          #include <pio/pio.h>
     37          
     38          //------------------------------------------------------------------------------
     39          //         Local Variables
     40          //------------------------------------------------------------------------------
     41          
     42          #ifdef PINS_LEDS

   \                                 In section .rodata, align 4
     43          static const Pin pinsLeds[] = {PINS_LEDS};
   \                     pinsLeds:
   \   00000000   0000020000F4       DC32 131072, 0FFFFF400H
   \              FFFF        
   \   00000008   02040000           DC8 2, 4, 0, 0
   \   0000000C   0200000000F4       DC32 2, 0FFFFF400H
   \              FFFF        
   \   00000014   02040000           DC8 2, 4, 0, 0
   \   00000018   0400000000F4       DC32 4, 0FFFFF400H
   \              FFFF        
   \   00000020   02040000           DC8 2, 4, 0, 0
   \   00000024   0800000000F4       DC32 8, 0FFFFF400H
   \              FFFF        
   \   0000002C   02040000           DC8 2, 4, 0, 0
     44          static const unsigned int numLeds = PIO_LISTSIZE(pinsLeds);
     45          #endif
     46          
     47          //------------------------------------------------------------------------------
     48          //         Global Functions
     49          //------------------------------------------------------------------------------
     50          
     51          //------------------------------------------------------------------------------
     52          /// Configures the pin associated with the given LED number. If the LED does
     53          /// not exist on the board, the function does nothing.
     54          /// \param led  Number of the LED to configure.
     55          /// \return 1 if the LED exists and has been configured; otherwise 0.
     56          //------------------------------------------------------------------------------

   \                                 In section .text, align 4, keep-with-next
     57          unsigned char LED_Configure(unsigned int led)
     58          {
   \                     LED_Configure:
   \   00000000   00502DE9           PUSH     {R12,LR}
     59          #ifdef PINS_LEDS
     60              // Check that LED exists
     61              if (led >= numLeds) {
   \   00000004   040050E3           CMP      R0,#+4
     62          
     63                  return 0;
   \   00000008   0000A023           MOVCS    R0,#+0
     64              }
     65          
     66              // Configure LED
     67              return (PIO_Configure(&pinsLeds[led], 1));
   \   0000000C   0110A033           MOVCC    R1,#+1
   \   00000010   0C20A033           MOVCC    R2,#+12
   \   00000014   ........           LDRCC    R3,??DataTable2
   \   00000018   92302030           MLACC    R0,R2,R0,R3
   \   0000001C   ........           BLCC     PIO_Configure
   \   00000020   ........           B        ?Subroutine0
     68          #else
     69              return 0;
     70          #endif
     71          }

   \                                 In section .text, align 4, keep-with-next
   \                     ?Subroutine0:
   \   00000000   0240BDE8           POP      {R1,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
     72          
     73          //------------------------------------------------------------------------------
     74          /// Turns the given LED on if it exists; otherwise does nothing.
     75          /// \param led  Number of the LED to turn on.
     76          /// \return 1 if the LED has been turned on; 0 otherwise.
     77          //------------------------------------------------------------------------------

   \                                 In section .text, align 4, keep-with-next
     78          unsigned char LED_Set(unsigned int led)
     79          {
   \                     LED_Set:
   \   00000000   00502DE9           PUSH     {R12,LR}
     80          #ifdef PINS_LEDS
     81              // Check if LED exists
     82              if (led >= numLeds) {
   \   00000004   040050E3           CMP      R0,#+4
     83          
     84                  return 0;
   \   00000008   0000A023           MOVCS    R0,#+0
   \   0000000C   0900002A           BCS      ??LED_Set_0
     85              }
     86          
     87              // Turn LED on
     88              if (pinsLeds[led].type == PIO_OUTPUT_0) {
   \   00000010   0C10A0E3           MOV      R1,#+12
   \   00000014   ........           LDR      R2,??DataTable2
   \   00000018   912020E0           MLA      R0,R1,R0,R2
   \   0000001C   0910D0E5           LDRB     R1,[R0, #+9]
   \   00000020   030051E3           CMP      R1,#+3
   \   00000024   0100001A           BNE      ??LED_Set_1
     89          
     90                  PIO_Set(&pinsLeds[led]);
   \   00000028   ........           BL       PIO_Set
   \   0000002C   000000EA           B        ??LED_Set_2
     91              }
     92              else {
     93          
     94                  PIO_Clear(&pinsLeds[led]);
   \                     ??LED_Set_1:
   \   00000030   ........           BL       PIO_Clear
     95              }
     96          
     97              return 1;
   \                     ??LED_Set_2:
   \   00000034   0100A0E3           MOV      R0,#+1
   \                     ??LED_Set_0:
   \   00000038                      REQUIRE ?Subroutine0
   \   00000038                      ;; // Fall through to label ?Subroutine0
     98          #else
     99              return 0;
    100          #endif
    101          }
    102          
    103          //------------------------------------------------------------------------------
    104          /// Turns a LED off.
    105          /// \param led  Number of the LED to turn off.
    106          /// \param 1 if the LED has been turned off; 0 otherwise.
    107          //------------------------------------------------------------------------------

   \                                 In section .text, align 4, keep-with-next
    108          unsigned char LED_Clear(unsigned int led)
    109          {
   \                     LED_Clear:
   \   00000000   00502DE9           PUSH     {R12,LR}
    110          #ifdef PINS_LEDS
    111              // Check if LED exists
    112              if (led >= numLeds) {
   \   00000004   040050E3           CMP      R0,#+4
    113          
    114                  return 0;
   \   00000008   0000A023           MOVCS    R0,#+0
   \   0000000C   0900002A           BCS      ??LED_Clear_0
    115              }
    116          
    117              // Turn LED off
    118              if (pinsLeds[led].type == PIO_OUTPUT_0) {
   \   00000010   0C10A0E3           MOV      R1,#+12
   \   00000014   ........           LDR      R2,??DataTable2
   \   00000018   912020E0           MLA      R0,R1,R0,R2
   \   0000001C   0910D0E5           LDRB     R1,[R0, #+9]
   \   00000020   030051E3           CMP      R1,#+3
   \   00000024   0100001A           BNE      ??LED_Clear_1
    119          
    120                  PIO_Clear(&pinsLeds[led]);
   \   00000028   ........           BL       PIO_Clear
   \   0000002C   000000EA           B        ??LED_Clear_2
    121              }
    122              else {
    123          
    124                  PIO_Set(&pinsLeds[led]);
   \                     ??LED_Clear_1:
   \   00000030   ........           BL       PIO_Set
    125              }
    126          
    127              return 1;
   \                     ??LED_Clear_2:
   \   00000034   0100A0E3           MOV      R0,#+1
   \                     ??LED_Clear_0:
   \   00000038   ........           B        ?Subroutine0
    128          #else
    129              return 0;
    130          #endif
    131          }
    132          
    133          //------------------------------------------------------------------------------
    134          /// Toggles the current state of a LED.
    135          /// \param led  Number of the LED to toggle.
    136          /// \return 1 if the LED has been toggled; otherwise 0.
    137          //------------------------------------------------------------------------------

   \                                 In section .text, align 4, keep-with-next
    138          unsigned char LED_Toggle(unsigned int led)
    139          {
   \                     LED_Toggle:
   \   00000000   10402DE9           PUSH     {R4,LR}
    140          #ifdef PINS_LEDS
    141              // Check if LED exists
    142              if (led >= numLeds) {
   \   00000004   040050E3           CMP      R0,#+4
    143          
    144                  return 0;
   \   00000008   0000A023           MOVCS    R0,#+0
   \   0000000C   0B00002A           BCS      ??LED_Toggle_0
    145              }
    146          
    147              // Toggle LED
    148              if (PIO_GetOutputDataStatus(&pinsLeds[led])) {
   \   00000010   0C10A0E3           MOV      R1,#+12
   \   00000014   ........           LDR      R2,??DataTable2
   \   00000018   912024E0           MLA      R4,R1,R0,R2
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           BL       PIO_GetOutputDataStatus
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   0100000A           BEQ      ??LED_Toggle_1
    149          
    150                  PIO_Clear(&pinsLeds[led]);
   \   00000030   ........           BL       PIO_Clear
   \   00000034   000000EA           B        ??LED_Toggle_2
    151              }
    152              else {
    153          
    154                  PIO_Set(&pinsLeds[led]);
   \                     ??LED_Toggle_1:
   \   00000038   ........           BL       PIO_Set
    155              }
    156          
    157              return 1;
   \                     ??LED_Toggle_2:
   \   0000003C   0100A0E3           MOV      R0,#+1
   \                     ??LED_Toggle_0:
   \   00000040   1040BDE8           POP      {R4,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return
    158          #else
    159              return 0;
    160          #endif
    161          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   ........           DC32     pinsLeds
    162          

   Maximum stack usage in bytes:

     Function      .cstack
     --------      -------
     LED_Clear          8
     LED_Configure      8
     LED_Set            8
     LED_Toggle         8


   Section sizes:

     Function/Label Bytes
     -------------- -----
     pinsLeds         48
     LED_Configure    36
     ?Subroutine0      8
     LED_Set          56
     LED_Clear        60
     LED_Toggle       72
     ??DataTable2      4

 
  48 bytes in section .rodata
 236 bytes in section .text
 
 236 bytes of CODE  memory
  48 bytes of CONST memory

Errors: none
Warnings: none
