###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V5.50.0.51878/W32 for ARM     14/Mar/2021  19:14:53 #
# Copyright (C) 1999-2010 IAR Systems AB.                                     #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\Projects\in-18-nixie-clock\at91lib\peripherals\pio\pi #
#                    o.c                                                      #
#    Command line =  C:\Projects\in-18-nixie-clock\at91lib\peripherals\pio\pi #
#                    o.c -D at91sam7s128 -D flash -D TRACE_LEVEL=3 -lC        #
#                    C:\Projects\in-18-nixie-clock\at91sam7s-ek\usb-device-cd #
#                    c-serial-project\ewp\at91sam7s128_flash\List\ --remarks  #
#                    --diag_suppress Pe826,Pe1375 -o                          #
#                    C:\Projects\in-18-nixie-clock\at91sam7s-ek\usb-device-cd #
#                    c-serial-project\ewp\at91sam7s128_flash\Obj\ --debug     #
#                    --endian=little --cpu=ARM7TDMI -e --fpu=None             #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 5.4\arm\INC\DLib_Config_Full. #
#                    h" -I C:\Projects\in-18-nixie-clock\at91sam7s-ek\usb-dev #
#                    ice-cdc-serial-project\ewp\..\..\..\at91lib/peripherals\ #
#                     -I C:\Projects\in-18-nixie-clock\at91sam7s-ek\usb-devic #
#                    e-cdc-serial-project\ewp\..\..\..\at91lib/components\    #
#                    -I C:\Projects\in-18-nixie-clock\at91sam7s-ek\usb-device #
#                    -cdc-serial-project\ewp\..\..\..\at91lib/usb/device\ -I  #
#                    C:\Projects\in-18-nixie-clock\at91sam7s-ek\usb-device-cd #
#                    c-serial-project\ewp\..\..\..\at91lib\ -I                #
#                    C:\Projects\in-18-nixie-clock\at91sam7s-ek\usb-device-cd #
#                    c-serial-project\ewp\..\..\..\external_libs\ -I          #
#                    C:\Projects\in-18-nixie-clock\at91sam7s-ek\usb-device-cd #
#                    c-serial-project\ewp\..\..\..\at91lib/boards/at91sam7s-e #
#                    k\ -I "C:\Program Files (x86)\IAR Systems\Embedded       #
#                    Workbench 5.4\arm\INC\" --interwork --cpu_mode arm -Ohz  #
#    List file    =  C:\Projects\in-18-nixie-clock\at91sam7s-ek\usb-device-cd #
#                    c-serial-project\ewp\at91sam7s128_flash\List\pio.lst     #
#    Object file  =  C:\Projects\in-18-nixie-clock\at91sam7s-ek\usb-device-cd #
#                    c-serial-project\ewp\at91sam7s128_flash\Obj\pio.o        #
#                                                                             #
#                                                                             #
###############################################################################

C:\Projects\in-18-nixie-clock\at91lib\peripherals\pio\pio.c
      1          /* ----------------------------------------------------------------------------
      2           *         ATMEL Microcontroller Software Support 
      3           * ----------------------------------------------------------------------------
      4           * Copyright (c) 2008, Atmel Corporation
      5           *
      6           * All rights reserved.
      7           *
      8           * Redistribution and use in source and binary forms, with or without
      9           * modification, are permitted provided that the following conditions are met:
     10           *
     11           * - Redistributions of source code must retain the above copyright notice,
     12           * this list of conditions and the disclaimer below.
     13           *
     14           * Atmel's name may not be used to endorse or promote products derived from
     15           * this software without specific prior written permission.
     16           *
     17           * DISCLAIMER: THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR
     18           * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
     19           * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
     20           * DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR ANY DIRECT, INDIRECT,
     21           * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
     22           * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
     23           * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     24           * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     25           * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
     26           * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     27           * ----------------------------------------------------------------------------
     28           */
     29          
     30          //------------------------------------------------------------------------------
     31          //         Headers
     32          //------------------------------------------------------------------------------
     33          
     34          #include "pio.h"
     35          #include <board.h>
     36          
     37          //------------------------------------------------------------------------------
     38          //         Local Functions
     39          //------------------------------------------------------------------------------
     40          
     41          //------------------------------------------------------------------------------
     42          /// Configures one or more pin(s) of a PIO controller as being controlled by
     43          /// peripheral A. Optionally, the corresponding internal pull-up(s) can be
     44          /// enabled.
     45          /// \param pio  Pointer to a PIO controller.
     46          /// \param mask  Bitmask of one or more pin(s) to configure.
     47          /// \param enablePullUp  Indicates if the pin(s) internal pull-up shall be
     48          ///                      configured.
     49          //------------------------------------------------------------------------------
     50          static void PIO_SetPeripheralA(
     51              AT91S_PIO *pio,
     52              unsigned int mask,
     53              unsigned char enablePullUp)
     54          {
     55          #if !defined(AT91C_PIOA_ASR)
     56              unsigned int abmr;
     57          #endif
     58          
     59              // Disable interrupts on the pin(s)
     60              pio->PIO_IDR = mask;
     61          
     62              // Enable the pull-up(s) if necessary
     63              if (enablePullUp) {
     64          
     65                  pio->PIO_PPUER = mask;
     66              }
     67              else {
     68          
     69                  pio->PIO_PPUDR = mask;
     70              }
     71          
     72              // Configure pin
     73          #if defined(AT91C_PIOA_ASR)
     74              pio->PIO_ASR = mask;
     75          #else
     76              abmr = pio->PIO_ABSR;
     77              pio->PIO_ABSR &= (~mask & abmr);
     78          #endif
     79              pio->PIO_PDR = mask;
     80          }
     81          
     82          //------------------------------------------------------------------------------
     83          /// Configures one or more pin(s) of a PIO controller as being controlled by
     84          /// peripheral B. Optionally, the corresponding internal pull-up(s) can be
     85          /// enabled.
     86          /// \param pio  Pointer to a PIO controller.
     87          /// \param mask  Bitmask of one or more pin(s) to configure.
     88          /// \param enablePullUp  Indicates if the pin(s) internal pull-up shall be
     89          ///                      configured.
     90          //------------------------------------------------------------------------------
     91          static void PIO_SetPeripheralB(
     92              AT91S_PIO *pio,
     93              unsigned int mask,
     94              unsigned char enablePullUp)
     95          {
     96          #if !defined(AT91C_PIOA_BSR)
     97              unsigned int abmr;
     98          #endif
     99          
    100              // Disable interrupts on the pin(s)
    101              pio->PIO_IDR = mask;
    102          
    103              // Enable the pull-up(s) if necessary
    104              if (enablePullUp) {
    105          
    106                  pio->PIO_PPUER = mask;
    107              }
    108              else {
    109          
    110                  pio->PIO_PPUDR = mask;
    111              }
    112          
    113              // Configure pin
    114          #if defined(AT91C_PIOA_BSR)
    115              pio->PIO_BSR = mask;
    116          #else
    117              abmr = pio->PIO_ABSR;
    118              pio->PIO_ABSR = mask | abmr;
    119          #endif
    120              pio->PIO_PDR = mask;
    121          }
    122          
    123          #if defined(AT91C_PIOA_IFDGSR) //Glitch or Debouncing filter selection supported
    124          //------------------------------------------------------------------------------
    125          /// Configures Glitch or Debouncing filter for input
    126          /// \param pio      Pointer to a PIO controller.
    127          /// \param mask   Bitmask for filter selection.
    128          ///                     each of 32 bit field, 0 is Glitch, 1 is Debouncing
    129          /// \param clkDiv  Clock divider if Debouncing select, using the lowest 14 bits
    130          ///                     common for all PIO line of selecting deboucing filter
    131          //------------------------------------------------------------------------------
    132          static void PIO_SetFilter(
    133              AT91S_PIO *pio,
    134              unsigned int filterSel,
    135              unsigned int clkDiv)
    136          {
    137              pio->PIO_DIFSR = filterSel;//set Debouncing, 0 bit field no effect
    138              pio->PIO_SCIFSR = ~filterSel;//set Glitch, 0 bit field no effect
    139          
    140              pio->PIO_SCDR = clkDiv & 0x3FFF;//the lowest 14 bits work
    141          }
    142          #endif
    143          
    144          //------------------------------------------------------------------------------
    145          /// Configures one or more pin(s) or a PIO controller as inputs. Optionally,
    146          /// the corresponding internal pull-up(s) and glitch filter(s) can be
    147          /// enabled.
    148          /// \param pio  Pointer to a PIO controller.
    149          /// \param mask  Bitmask indicating which pin(s) to configure as input(s).
    150          /// \param enablePullUp  Indicates if the internal pull-up(s) must be enabled.
    151          /// \param enableFilter  Indicates if the glitch filter(s) must be enabled.
    152          //------------------------------------------------------------------------------
    153          static void PIO_SetInput(
    154              AT91S_PIO *pio,
    155              unsigned int mask,
    156              unsigned char enablePullUp,
    157              unsigned char enableFilter)
    158          {
    159              // Disable interrupts
    160              pio->PIO_IDR = mask;
    161          
    162              // Enable pull-up(s) if necessary
    163              if (enablePullUp) {
    164              
    165                  pio->PIO_PPUER = mask;
    166              }
    167              else {
    168              
    169                  pio->PIO_PPUDR = mask;
    170              }
    171          
    172              // Enable filter(s) if necessary
    173              if (enableFilter) {
    174              
    175                  pio->PIO_IFER = mask;
    176              }
    177              else {
    178              
    179                  pio->PIO_IFDR = mask;
    180              }
    181          
    182              // Configure pin as input
    183              pio->PIO_ODR = mask;
    184              pio->PIO_PER = mask;
    185          }
    186          
    187          //------------------------------------------------------------------------------
    188          /// Configures one or more pin(s) of a PIO controller as outputs, with the
    189          /// given default value. Optionally, the multi-drive feature can be enabled
    190          /// on the pin(s).
    191          /// \param pio  Pointer to a PIO controller.
    192          /// \param mask  Bitmask indicating which pin(s) to configure.
    193          /// \param defaultValue  Default level on the pin(s).
    194          /// \param enableMultiDrive  Indicates if the pin(s) shall be configured as
    195          ///                          open-drain.
    196          /// \param enablePullUp  Indicates if the pin shall have its pull-up activated.
    197          //------------------------------------------------------------------------------
    198          static void PIO_SetOutput(
    199              AT91S_PIO *pio,
    200              unsigned int mask,
    201              unsigned char defaultValue,
    202              unsigned char enableMultiDrive,
    203              unsigned char enablePullUp)
    204          {
    205              // Disable interrupts
    206              pio->PIO_IDR = mask;
    207          
    208              // Enable pull-up(s) if necessary
    209              if (enablePullUp) {
    210              
    211                  pio->PIO_PPUER = mask;
    212              }
    213              else {
    214              
    215                  pio->PIO_PPUDR = mask;
    216              }
    217          
    218              // Enable multi-drive if necessary
    219              if (enableMultiDrive) {
    220              
    221                  pio->PIO_MDER = mask;
    222              }
    223              else {
    224              
    225                  pio->PIO_MDDR = mask;
    226              }
    227          
    228              // Set default value
    229              if (defaultValue) {
    230          
    231                  pio->PIO_SODR = mask;
    232              }
    233              else {
    234          
    235                  pio->PIO_CODR = mask;
    236              }
    237          
    238              // Configure pin(s) as output(s)
    239              pio->PIO_OER = mask;
    240              pio->PIO_PER = mask;
    241          }
    242          
    243          //------------------------------------------------------------------------------
    244          //         Global Functions
    245          //------------------------------------------------------------------------------
    246          
    247          //------------------------------------------------------------------------------
    248          /// Configures a list of Pin instances, each of which can either hold a single
    249          /// pin or a group of pins, depending on the mask value; all pins are configured
    250          /// by this function. The size of the array must also be provided and is easily
    251          /// computed using PIO_LISTSIZE whenever its length is not known in advance.
    252          /// \param list  Pointer to a list of Pin instances.
    253          /// \param size  Size of the Pin list (calculated using PIO_LISTSIZE).
    254          /// \return 1 if the pins have been configured properly; otherwise 0.
    255          //------------------------------------------------------------------------------

   \                                 In section .text, align 4, keep-with-next
    256          unsigned char PIO_Configure(const Pin *list, unsigned int size)
    257          {
   \                     PIO_Configure:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0120A0E3           MOV      R2,#+1
   \   00000008   0A0000EA           B        ??PIO_Configure_1
    258              // Configure pins
    259              while (size > 0) {
    260              
    261                  switch (list->type) {
    262              
    263                      case PIO_PERIPH_A:
    264                          PIO_SetPeripheralA(list->pio,
    265                                             list->mask,
    266                                             (list->attribute & PIO_PULLUP) ? 1 : 0);
   \                     ??PIO_Configure_2:
   \   0000000C   0A30D0E5           LDRB     R3,[R0, #+10]
   \   00000010   013013E2           ANDS     R3,R3,#0x1
   \   00000014   00C090E5           LDR      R12,[R0, #+0]
   \   00000018   04E090E5           LDR      LR,[R0, #+4]
   \   0000001C   44C08EE5           STR      R12,[LR, #+68]
   \   00000020   64C08E15           STRNE    R12,[LR, #+100]
   \   00000024   60C08E05           STREQ    R12,[LR, #+96]
   \   00000028   70C08EE5           STR      R12,[LR, #+112]
   \                     ??PIO_Configure_3:
   \   0000002C   04C08EE5           STR      R12,[LR, #+4]
    267                          break;
    268              
    269                      case PIO_PERIPH_B:
    270                          PIO_SetPeripheralB(list->pio,
    271                                             list->mask,
    272                                             (list->attribute & PIO_PULLUP) ? 1 : 0);
    273                          break;
    274              
    275                      case PIO_INPUT:
    276                          AT91C_BASE_PMC->PMC_PCER = 1 << list->id;
    277                          PIO_SetInput(list->pio,
    278                                       list->mask,
    279                                       (list->attribute & PIO_PULLUP) ? 1 : 0,
    280                                       (list->attribute & PIO_DEGLITCH)? 1 : 0);
    281          
    282                          #if defined(AT91C_PIOA_IFDGSR) //PIO3 with Glitch or Debouncing selection
    283                          //if glitch input filter enabled, set it
    284                          if(list->attribute & PIO_DEGLITCH)//Glitch input filter enabled
    285                              PIO_SetFilter(list->pio,
    286                                  list->inFilter.filterSel,
    287                                  list->inFilter.clkDivider);
    288                          #endif
    289                          break;
    290              
    291                      case PIO_OUTPUT_0:
    292                      case PIO_OUTPUT_1:
    293                          PIO_SetOutput(list->pio,
    294                                        list->mask,
    295                                        (list->type == PIO_OUTPUT_1),
    296                                        (list->attribute & PIO_OPENDRAIN) ? 1 : 0,
    297                                        (list->attribute & PIO_PULLUP) ? 1 : 0);
    298                          break;
    299              
    300                      default: return 0;
    301                  }
    302          
    303                  list++;
   \                     ??PIO_Configure_4:
   \   00000030   0C0080E2           ADD      R0,R0,#+12
    304                  size--;
   \   00000034   011041E2           SUB      R1,R1,#+1
   \                     ??PIO_Configure_1:
   \   00000038   000051E3           CMP      R1,#+0
   \   0000003C   3F00000A           BEQ      ??PIO_Configure_5
   \   00000040   0930D0E5           LDRB     R3,[R0, #+9]
   \   00000044   03C0A0E1           MOV      R12,R3
   \   00000048   04005CE3           CMP      R12,#+4
   \   0000004C   3900008A           BHI      ??PIO_Configure_6
   \   00000050   DCE09FE1           LDRSB    LR,[PC, R12]
   \   00000054   0EF18FE0           ADD      PC,PC,LR, LSL #+2
   \                     ??PIO_Configure_0:
   \   00000058   EC010A20           DC8      0xEC,0x1,0xA,0x20
   \   0000005C   20000000           DC8      0x20,0x0,0x0,0x0
   \                     ??PIO_Configure_7:
   \   00000060   0A30D0E5           LDRB     R3,[R0, #+10]
   \   00000064   013013E2           ANDS     R3,R3,#0x1
   \   00000068   00C090E5           LDR      R12,[R0, #+0]
   \   0000006C   04E090E5           LDR      LR,[R0, #+4]
   \   00000070   44C08EE5           STR      R12,[LR, #+68]
   \   00000074   64C08E15           STRNE    R12,[LR, #+100]
   \   00000078   60C08E05           STREQ    R12,[LR, #+96]
   \   0000007C   74C08EE5           STR      R12,[LR, #+116]
   \   00000080   E9FFFFEA           B        ??PIO_Configure_3
   \                     ??PIO_Configure_8:
   \   00000084   D830D0E1           LDRSB    R3,[R0, #+8]
   \   00000088   1233A0E1           LSL      R3,R2,R3
   \   0000008C   EFC0E0E3           MVN      R12,#+239
   \   00000090   C0CFCCE3           BIC      R12,R12,#0x300
   \   00000094   00308CE5           STR      R3,[R12, #+0]
   \   00000098   0A30D0E5           LDRB     R3,[R0, #+10]
   \   0000009C   01C003E2           AND      R12,R3,#0x1
   \   000000A0   020013E3           TST      R3,#0x2
   \   000000A4   0130A013           MOVNE    R3,#+1
   \   000000A8   0030A003           MOVEQ    R3,#+0
   \   000000AC   00E090E5           LDR      LR,[R0, #+0]
   \   000000B0   044090E5           LDR      R4,[R0, #+4]
   \   000000B4   44E084E5           STR      LR,[R4, #+68]
   \   000000B8   00005CE3           CMP      R12,#+0
   \   000000BC   64E08415           STRNE    LR,[R4, #+100]
   \   000000C0   60E08405           STREQ    LR,[R4, #+96]
   \   000000C4   000053E3           CMP      R3,#+0
   \   000000C8   20E08415           STRNE    LR,[R4, #+32]
   \   000000CC   24E08405           STREQ    LR,[R4, #+36]
   \   000000D0   14E084E5           STR      LR,[R4, #+20]
   \   000000D4   00E084E5           STR      LR,[R4, #+0]
   \   000000D8   D4FFFFEA           B        ??PIO_Configure_4
   \                     ??PIO_Configure_9:
   \   000000DC   0AC0D0E5           LDRB     R12,[R0, #+10]
   \   000000E0   01E00CE2           AND      LR,R12,#0x1
   \   000000E4   04001CE3           TST      R12,#0x4
   \   000000E8   01C0A013           MOVNE    R12,#+1
   \   000000EC   00C0A003           MOVEQ    R12,#+0
   \   000000F0   040053E3           CMP      R3,#+4
   \   000000F4   0130A003           MOVEQ    R3,#+1
   \   000000F8   0030A013           MOVNE    R3,#+0
   \   000000FC   004090E5           LDR      R4,[R0, #+0]
   \   00000100   045090E5           LDR      R5,[R0, #+4]
   \   00000104   444085E5           STR      R4,[R5, #+68]
   \   00000108   00005EE3           CMP      LR,#+0
   \   0000010C   64408515           STRNE    R4,[R5, #+100]
   \   00000110   60408505           STREQ    R4,[R5, #+96]
   \   00000114   00005CE3           CMP      R12,#+0
   \   00000118   50408515           STRNE    R4,[R5, #+80]
   \   0000011C   54408505           STREQ    R4,[R5, #+84]
   \   00000120   000053E3           CMP      R3,#+0
   \   00000124   30408515           STRNE    R4,[R5, #+48]
   \   00000128   34408505           STREQ    R4,[R5, #+52]
   \   0000012C   104085E5           STR      R4,[R5, #+16]
   \   00000130   004085E5           STR      R4,[R5, #+0]
   \   00000134   BDFFFFEA           B        ??PIO_Configure_4
   \                     ??PIO_Configure_6:
   \   00000138   0000A0E3           MOV      R0,#+0
   \   0000013C   000000EA           B        ??PIO_Configure_10
    305              }
    306          
    307              return 1;
   \                     ??PIO_Configure_5:
   \   00000140   0100A0E3           MOV      R0,#+1
   \                     ??PIO_Configure_10:
   \   00000144   3040BDE8           POP      {R4,R5,LR}
   \   00000148   1EFF2FE1           BX       LR               ;; return
    308          }
    309          
    310          //------------------------------------------------------------------------------
    311          /// Sets a high output level on all the PIOs defined in the given Pin instance.
    312          /// This has no immediate effects on PIOs that are not output, but the PIO
    313          /// controller will memorize the value they are changed to outputs.
    314          /// \param pin  Pointer to a Pin instance describing one or more pins.
    315          //------------------------------------------------------------------------------

   \                                 In section .text, align 4, keep-with-next
    316          void PIO_Set(const Pin *pin)
    317          {
    318              pin->pio->PIO_SODR = pin->mask;
   \                     PIO_Set:
   \   00000000   041090E5           LDR      R1,[R0, #+4]
   \   00000004   000090E5           LDR      R0,[R0, #+0]
   \   00000008   300081E5           STR      R0,[R1, #+48]
    319          }
   \   0000000C   1EFF2FE1           BX       LR               ;; return
    320          
    321          //------------------------------------------------------------------------------
    322          /// Sets a low output level on all the PIOs defined in the given Pin instance.
    323          /// This has no immediate effects on PIOs that are not output, but the PIO
    324          /// controller will memorize the value they are changed to outputs.
    325          /// \param pin  Pointer to a Pin instance describing one or more pins.
    326          //------------------------------------------------------------------------------

   \                                 In section .text, align 4, keep-with-next
    327          void PIO_Clear(const Pin *pin)
    328          {
    329              pin->pio->PIO_CODR = pin->mask;
   \                     PIO_Clear:
   \   00000000   041090E5           LDR      R1,[R0, #+4]
   \   00000004   000090E5           LDR      R0,[R0, #+0]
   \   00000008   340081E5           STR      R0,[R1, #+52]
    330          }
   \   0000000C   1EFF2FE1           BX       LR               ;; return
    331          
    332          //------------------------------------------------------------------------------
    333          /// Returns 1 if one or more PIO of the given Pin instance currently have a high
    334          /// level; otherwise returns 0. This method returns the actual value that is
    335          /// being read on the pin. To return the supposed output value of a pin, use
    336          /// PIO_GetOutputDataStatus() instead.
    337          /// \param pin  Pointer to a Pin instance describing one or more pins.
    338          /// \return 1 if the Pin instance contains at least one PIO that currently has
    339          /// a high level; otherwise 0.
    340          //------------------------------------------------------------------------------

   \                                 In section .text, align 4, keep-with-next
    341          unsigned char PIO_Get(const Pin *pin)
    342          {
    343              unsigned int reg;
    344              if ((pin->type == PIO_OUTPUT_0) || (pin->type == PIO_OUTPUT_1)) {
   \                     PIO_Get:
   \   00000000   0910D0E5           LDRB     R1,[R0, #+9]
   \   00000004   030051E3           CMP      R1,#+3
   \   00000008   04005113           CMPNE    R1,#+4
    345          
    346                  reg = pin->pio->PIO_ODSR;
   \   0000000C   04109005           LDREQ    R1,[R0, #+4]
   \   00000010   38109105           LDREQ    R1,[R1, #+56]
    347              }
    348              else {
    349          
    350                  reg = pin->pio->PIO_PDSR;
   \   00000014   04109015           LDRNE    R1,[R0, #+4]
   \   00000018   3C109115           LDRNE    R1,[R1, #+60]
    351              }
    352          
    353              if ((reg & pin->mask) == 0) {
   \   0000001C   000090E5           LDR      R0,[R0, #+0]
   \   00000020   010010E1           TST      R0,R1
   \   00000024   0000001A           BNE      ??PIO_Get_0
    354          
    355                  return 0;
   \   00000028   ........           B        ?Subroutine1
    356              }
    357              else {
    358          
    359                  return 1;
   \                     ??PIO_Get_0:
   \   0000002C   ........           B        ?Subroutine0
    360              }
    361          }

   \                                 In section .text, align 4, keep-with-next
   \                     ?Subroutine1:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   1EFF2FE1           BX       LR

   \                                 In section .text, align 4, keep-with-next
   \                     ?Subroutine0:
   \   00000000   0100A0E3           MOV      R0,#+1
   \   00000004   1EFF2FE1           BX       LR               ;; return
    362          
    363          
    364          //------------------------------------------------------------------------------
    365          /// Returns 1 if one or more PIO of the given Pin are configured to output a
    366          /// high level (even if they are not output).
    367          /// To get the actual value of the pin, use PIO_Get() instead.
    368          /// \param pin  Pointer to a Pin instance describing one or more pins.
    369          /// \return 1 if the Pin instance contains at least one PIO that is configured
    370          /// to output a high level; otherwise 0.
    371          //------------------------------------------------------------------------------

   \                                 In section .text, align 4, keep-with-next
    372          unsigned char PIO_GetOutputDataStatus(const Pin *pin)
    373          {
    374              if ((pin->pio->PIO_ODSR & pin->mask) == 0) {
   \                     PIO_GetOutputDataStatus:
   \   00000000   041090E5           LDR      R1,[R0, #+4]
   \   00000004   381091E5           LDR      R1,[R1, #+56]
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   010010E1           TST      R0,R1
   \   00000010   0000001A           BNE      ??PIO_GetOutputDataStatus_0
    375          
    376                  return 0;
   \   00000014   ........           B        ?Subroutine1
    377              }
    378              else {
    379          
    380                  return 1;
   \                     ??PIO_GetOutputDataStatus_0:
   \   00000018   ........           B        ?Subroutine0
    381              }
    382          }

   Maximum stack usage in bytes:

     Function                .cstack
     --------                -------
     PIO_Clear                    0
     PIO_Configure               12
     PIO_Get                      0
     PIO_GetOutputDataStatus      0
     PIO_Set                      0


   Section sizes:

     Function/Label          Bytes
     --------------          -----
     PIO_Configure            332
     PIO_Set                   16
     PIO_Clear                 16
     PIO_Get                   48
     ?Subroutine1               8
     ?Subroutine0               8
     PIO_GetOutputDataStatus   28

 
 456 bytes in section .text
 
 456 bytes of CODE memory

Errors: none
Warnings: none
